service: serverless-chat

provider:
  name: aws
  runtime: nodejs8.10
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ChatConnectionsTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ChatConnectionsTable, Arn]
              - '*'
  environment:
    CHATCONNECTION_TABLE:
      Ref: ChatConnectionsTable

  # optional
  websocketApiName: websocket-chat-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action

plugins:
  - serverless-websockets-plugin

functions:
  connectionManager:
    handler: handler.connectionManager
    events:
      - websocket:
          routeKey: $connect
      - websocket:
          routeKey: $disconnect
  defaultMessages:
    handler: handler.defaultMessage
    events:
      - websocket:
          routeKey: $default

  sendMessage:
    handler: handler.sendMessage
    events:
      - websocket:
          routeKey: sendMessage
resources:
  Resources:
    ChatConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
